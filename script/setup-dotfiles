#!/usr/bin/env python
#
# Symlinks dotfiles to the appropriate locations

import os
import errno


# source => target
dotfiles = (
    ('bash_profile', '~/.bash_profile'),
    ('ctags', '~/.ctags'),
    ('.eslintrc.json', '~/.eslintrc.json'),
    ('gemrc', '~/.gemrc'),
    ('gitconfig', '~/.gitconfig'),
    ('gitignore_global', '~/.gitignore_global'),
    ('gvimrc', '~/.gvimrc'),
    ('kitty.conf', '~/.config/kitty/kitty.conf'),
    ('nvim', '~/.config/nvim'),
    ('.ripgreprc', '~/.ripgreprc'),
    ('rspec', '~/.rspec'),
    ('tmux.conf', '~/.tmux.conf'),
    ('vim', '~/.vim'),
    ('zshrc', '~/.zshrc'),
)

BLACK = "\033[1;30m"
GREEN = "\033[0;32m"
BLUE = "\033[1;34m"
RESET = "\033[0;0m"


def create_symlinks(symlink_map):
    for source, target in symlink_map:
        source_path = os.path.abspath(source)
        target_path = os.path.abspath(os.path.expanduser(target))

        print 'Attempting: {}{}{} ({} -> {})'.format(BLUE, source, RESET, source_path, target_path)

        if os.path.exists(target_path) or os.path.islink(target_path):
            print '{}=> Already exists, skipping...{}'.format(BLACK, RESET)
            continue

        # Attempt to make parent directories
        try:
            os.makedirs(os.path.dirname(target_path))
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise

        os.symlink(source_path, target_path)
        print '{}=> Linked: {}{}'.format(GREEN, source, RESET)


if __name__ == '__main__':
    create_symlinks(dotfiles)
