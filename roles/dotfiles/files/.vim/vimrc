"-------------------------------------------------------------------------------
" vimrc
" Author: Brandon Iffert <brandoniffert@gmail.com>
" Source: https://github.com/brandoniffert/computer/blob/master/roles/dotfiles/files/.vim/vimrc
"-------------------------------------------------------------------------------

"-------------------------------------------------------------------------------
" PLUGINS
"-------------------------------------------------------------------------------

autocmd!

" Bootstrap vim-plug on a fresh install - require a manual PlugInstall
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin()
Plug 'arcticicestudio/nord-vim', { 'branch': 'develop' }
Plug 'christoomey/vim-tmux-navigator'
Plug 'ervandew/supertab'
Plug 'janko-m/vim-test'
Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-peekaboo'
Plug 'justinmk/vim-sneak'
Plug 'ludovicchabant/vim-gutentags'
Plug 'machakann/vim-sandwich'
Plug 'mhinz/vim-signify'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTree' }
Plug 'sheerun/vim-polyglot'
Plug 'simnalamburt/vim-mundo'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'vim-airline/vim-airline'
Plug 'wincent/loupe'
Plug 'w0rp/ale'
Plug 'Yggdroot/indentLine'

if executable('fzf')
  Plug '/usr/local/opt/fzf'
  Plug 'junegunn/fzf.vim'
endif

if executable('composer')
  Plug 'phpactor/phpactor', {'for': 'php', 'do': 'composer install'}
endif
call plug#end()

"-------------------------------------------------------------------------------
" SETTINGS
"-------------------------------------------------------------------------------

" General settings
set clipboard=
set dictionary+=/usr/share/dict/words
set dictionary+=/usr/share/dict/web2a
set dictionary+=/usr/share/dict/propernames
set dictionary+=/usr/share/dict/connectives
set foldlevelstart=0
set foldmethod=marker
set formatoptions+=qrn1j
set hidden
set lazyredraw
set linebreak
set nojoinspaces
set noshowmode
set nonumber
set ruler
set scrolloff=3
set showcmd
set splitbelow
set splitright
set switchbuf+=useopen
set termguicolors
set updatetime=500

if !empty('$TMUX')
  set cmdheight=2
endif

" Set custom spellfile
if filereadable(expand('~/.vim/spell/en.utf-8.add'))
  set spellfile=~/.vim/spell/en.utf-8.add
endif

" Tabs
set expandtab
set shiftwidth=2
set softtabstop=2

" Wildmenu
set wildmode=longest,list
set wildignore+=.svn,*.jpg,*.jpeg,*.png,*.gif
set wildignore+=*.sw?,*.DS_Store,*.pyc.*/tmp/*,*.so,*.zip

" Show invisible characters
set list
let &listchars="tab:>-,trail:.,extends:>,precedes:<,nbsp:\u00b7"

" Fillchars
set fillchars=vert:│,fold:-

" Searching
set showmatch
set ignorecase
set smartcase

" Backups
if exists('$SUDO_USER')
  set nobackup
  set nowritebackup
else
  if !has('nvim')
    set backupdir=~/.vim/tmp/backup//
    set backupdir+=.
  endif
endif

" Swapfile
if exists('$SUDO_USER')
  set noswapfile
else
  if !has('nvim')
    set directory=~/.vim/tmp/swap//
    set directory+=.
  endif
endif

" Undo
if has('persistent_undo')
  if exists('$SUDO_USER')
    set noundofile
  else
    if !has('nvim')
      set undodir=~/.vim/tmp/undo//
      set undodir+=.
    endif

    set undofile
  endif
endif

" viminfo
if has('viminfo')
  if exists('$SUDO_USER')
    set viminfo=
  else
    if !has('nvim')
      set viminfo+=n~/.vim/tmp/viminfo

      if !empty(glob('~/.vim/tmp/viminfo'))
        if !filereadable(expand('~/.vim/tmp/viminfo'))
          echoerr 'warning: ~/.vim/tmp/viminfo exists but is not readable'
        endif
      endif
    endif
  endif
endif

" Set grepprg to use ripgrep
if executable('rg')
  set grepprg=rg\ --vimgrep\ $*
  set grepformat=%f:%l:%m
endif

"-------------------------------------------------------------------------------
" COLOR
"-------------------------------------------------------------------------------

augroup nord-overrides
  autocmd!
  autocmd ColorScheme nord highlight! CursorLine guibg=#2B303B
  autocmd ColorScheme nord highlight! Error cterm=bold guifg=#D8DEE9 gui=bold
  autocmd ColorScheme nord highlight! ErrorMsg cterm=bold gui=bold
  autocmd ColorScheme nord highlight! Folded guifg=#7b88a1 guibg=#2E3440 gui=NONE
  autocmd ColorScheme nord highlight! IncSearch cterm=bold guibg=#ebcb8b gui=bold
  autocmd ColorScheme nord highlight! LineNr guibg=NONE
  autocmd ColorScheme nord highlight! Normal guibg=NONE
  autocmd ColorScheme nord highlight! Pmenu guibg=#3b4252
  autocmd ColorScheme nord highlight! PmenuSel guibg=#e5e9f0 guifg=#2B303B gui=bold cterm=bold
  autocmd ColorScheme nord highlight! Search cterm=bold gui=bold
  autocmd ColorScheme nord highlight! SignColumn guibg=NONE
  autocmd ColorScheme nord highlight! Statement gui=NONE
  autocmd ColorScheme nord highlight! TabLine guibg=#15171E guifg=#D8DEE9
  autocmd ColorScheme nord highlight! TabLineFill guifg=#D8DEE9 guibg=NONE
  autocmd ColorScheme nord highlight! TabLineSel guibg=#D8DEE9 guifg=#15171E
  autocmd ColorScheme nord highlight! VertSplit guibg=NONE
  autocmd ColorScheme nord highlight! Visual guibg=#2E3440
  autocmd ColorScheme nord highlight! WarningMsg cterm=bold gui=bold
  autocmd ColorScheme nord highlight! link CursorLineNr LineNr
  autocmd ColorScheme nord highlight! link jsObjectKey jsonKeyword
augroup END

let g:nord_comment_brightness = 3
let g:nord_italic = 1
let g:nord_italic_comments = 1
silent! colorscheme nord

" Airline
let g:airline_theme = 'bti_nord'
let g:airline_symbols_ascii = 1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#hunks#non_zero_only = 1
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline#extensions#wordcount#enabled = 0
let g:airline_section_x = ''

let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

"-------------------------------------------------------------------------------
" KEY MAPPINGS
"-------------------------------------------------------------------------------

" Remap leaders
let mapleader = "\<space>"
let maplocalleader = ","

" Navigate over wrapped lines
nnoremap j gj
nnoremap k gk

" Clear the highlighted search
nmap <cr> <Plug>(LoupeClearHighlight)

" Enter command mode
nnoremap <leader><cr> :
vnoremap <leader><cr> :

" Use hjkl for switching between splits
nnoremap <c-h> <c-W>h
nnoremap <c-j> <c-W>j
nnoremap <c-k> <c-W>k
nnoremap <c-l> <c-W>l

" Use arrow keys for tab navigation
nnoremap <left> :tabp<cr>
nnoremap <right> :tabn<cr>

" Select text that was just pasted
nnoremap <leader>gv V`]

" Quick jump back and forth between files
nnoremap <leader><leader> <c-^>

" Quick quit
nnoremap <silent> <leader>q :quit<cr>

" Easy indent/outdent
nnoremap <tab> >>
nnoremap <s-tab> <<
vnoremap <tab> >gv
vnoremap <s-tab> <gv

" Make S split lines (opposite of J)
nnoremap <silent> S :<c-u>call bti#functions#BreakHere()<cr>

" Open new horizontal/vertical split
nnoremap <silent> <leader>v :vnew<cr>

" Yank/paste using system clipboard
vnoremap <leader>y "*y
nnoremap <leader>p "*p

" Make Y act like other capital letters
nnoremap Y y$

" Run current file using makeprg
nnoremap <leader>r :make!<cr>

" Cycle line numbering
noremap <silent> <f3> :call bti#functions#CycleLineNumbering()<cr>

" Terminal mode mappings
if exists(':tnoremap')
  tnoremap <leader><esc> <c-\><c-n>
  tnoremap <leader><c-h> <c-\><c-n><c-w>h
  tnoremap <leader><c-j> <c-\><c-n><c-w>j
  tnoremap <leader><c-k> <c-\><c-n><c-w>k
  tnoremap <leader><c-l> <c-\><c-n><c-w>l
endif

"-------------------------------------------------------------------------------
" PLUGIN SETTINGS
"-------------------------------------------------------------------------------

" vim-peekaboo
let g:peekaboo_window = 'bo 30new'

" ALE
let g:ale_lint_on_text_changed = 'never'
let g:ale_sign_error = '●'
let g:ale_sign_warning = '●'
let g:airline#extensions#ale#enabled = 1
let g:ale_linters = {
\   'html': [],
\}

nmap <silent> [e <Plug>(ale_previous_wrap)
nmap <silent> ]e <Plug>(ale_next_wrap)

" gutentags
let g:gutentags_cache_dir = '~/.vim/tmp/tags'

if exists('$SUDO_USER')
  let g:gutentags_dont_load = 1
endif

" indentLine
let g:indentLine_char = '│'
let g:indentLine_color_term = 0
let g:indentLine_color_gui = '#2B303B'
let g:indentLine_bufNameExclude = ['NERD_tree.*']
let g:indentLine_fileTypeExclude = ['help']

" loupe
let g:LoupeCenterResults = 0

" NERDTree
let g:NERDTreeDirArrowExpandable = '▶'
let g:NERDTreeDirArrowCollapsible = '▼'
let g:NERDTreeMinimalUI = 1
let g:NERDTreeWinSize = 40

" phpactor
nmap <silent> <leader>gu :call phpactor#UseAdd()<cr>
nmap <silent> <leader>go :call phpactor#GotoDefinition()<cr>

" vim-signify
let g:signify_vcs_list = ['git']
let g:signify_sign_show_count = 0

" vim-sneak
let g:sneak#use_ic_scs = 1
let g:sneak#prompt = 'sneak: '
let g:sneak#target_labels = ';luyneioqwfpgarstdLUYNEIOQWFPGARSTD'

nmap <leader>s <Plug>SneakLabel_s
nmap <leader>S <Plug>SneakLabel_S

highlight! link Sneak IncSearch

" vim-test
nnoremap <silent> <leader>t :TestFile<cr>

" vim-markdown
let g:vim_markdown_conceal = 0

" fzf
let g:fzf_layout = { 'down': '~30%' }

nnoremap <silent> <leader>f :Files<cr>
nnoremap <silent> <leader>b :Buffers<cr>

function! s:fzf_statusline() abort
  highlight fzf1 guibg=#2E3440
  setlocal statusline=%#fzf1#\ >\ fzf
endfunction
autocmd! User FzfStatusLine call <SID>fzf_statusline()

if executable('rg')
  function! s:rg_with_opts(arg, bang) abort
    let rg_cmd = 'rg --line-number --smart-case --hidden --color=always --colors=path:none --colors=line:none --colors=match:fg:red '
    let tokens = split(a:arg)
    let rg_opts = join(filter(copy(tokens), 'v:val =~ "^-"'))
    let query = join(filter(copy(tokens), 'v:val !~ "^-"'))
    let cmd = rg_cmd . rg_opts . ' ' . shellescape(query)
    let preview_type = a:bang ? fzf#vim#with_preview('up:60%') : fzf#vim#with_preview('right:50%:hidden', '?')

    return call('fzf#vim#grep', [cmd, 0, preview_type])
  endfunction

  command! -bang -nargs=* G call s:rg_with_opts(<q-args>, <bang>0)
  nnoremap <leader>a :G<space>
endif

"-------------------------------------------------------------------------------
" COMMANDS
"-------------------------------------------------------------------------------

command! ReplaceFancyCharacters call bti#functions#ReplaceFancyCharacters()
command! StripWhitespace call bti#functions#StripWhitespace()

"-------------------------------------------------------------------------------
" AUTOCOMMANDS
"-------------------------------------------------------------------------------

augroup btiautocmds
  autocmd!

  " Automatically resize vim splits/panes when the window changes size
  autocmd! VimResized * execute "normal! \<c-w>="

  " Don't show line numbers in terminal
  if has('nvim')
    autocmd! TermOpen * setlocal nonumber norelativenumber
  endif

  " When editing a file, always jump to the last known cursor position
  autocmd! BufReadPost *
    \  if line("'\"") > 1 && line("'\"") <= line("$")
    \|   execute 'normal! g`"zvzz'
    \| endif
    noh
augroup END
