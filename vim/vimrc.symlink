" .vimrc
" Brandon Iffert <brandoniffert@gmail.com>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETUP
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" github repos
Bundle 'gmarik/vundle'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-surround'
Bundle 'kien/ctrlp.vim'
Bundle 'wincent/Command-T'
Bundle 'altercation/vim-colors-solarized'
Bundle 'ervandew/supertab'
Bundle 'tmhedberg/matchit'
Bundle 'mattn/gist-vim'
Bundle 'mattn/webapi-vim'
Bundle 'Raynes/jellybeans.vim'

filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" GENERAL
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8
set nomodeline
set hidden
set ruler
set backspace=eol,start,indent
set laststatus=2
set history=10000
set showbreak=↪
set autoread
set cursorline
set cmdheight=2
set scrolloff=3
set t_ti= t_te=
set fillchars=vert:¦
set showcmd
set notimeout
set ttimeout
set ttimeoutlen=10
set complete=.,w,b,u,t
set completeopt=longest,menuone,preview

" Tabs & Indenting
set expandtab tabstop=2 shiftwidth=2 softtabstop=2
set shiftround
set autoindent smarttab smartindent

" Backups
set nobackup 
set nowritebackup
set noswapfile

" Wildmenu
set wildmenu
set wildmode=longest,list:longest,list:full
set wildignore+=.git,.svn,*.jpg,*.jpeg,*.png,*.gif,*.sw?,*.DS_Store,*.pyc

" Searching
set showmatch incsearch hlsearch ignorecase smartcase

" Folding
set foldmethod=marker
set foldlevelstart=0
nnoremap <space> za

" Status Line
set statusline=\ %<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)\ %P\ 

let mapleader=","

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ENVIRONMENTS AND COLOR
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
set t_Co=256

set bg=dark
colorscheme bti256

" Read ITERM_PROFILE enviornment variable and set colorscheme accordingly
let iterm_profile = $ITERM_PROFILE
if iterm_profile == "solarized-light"
  set bg=light
  colorscheme solarized
endif

if has('gui_macvim')
  set guifont=Inconsolata-g:h12
  set guioptions-=r
  set guioptions-=L
  set guioptions-=b
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" KEY MAPS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap j gj
nnoremap k gk
nnoremap <silent> <CR> :nohlsearch<cr>
" use hjkl for switching between splits
nnoremap <C-j> <C-W>j
nnoremap <C-h> <C-W>h
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l

let g:EasyMotion_leader_key = '<Leader>m'

" use Command-T if available...
if has('ruby')
  let g:CommandTCancelMap=['<esc>', '<C-c>']
  let g:CommandTMaxHeight=20
  nnoremap <silent> <leader>f :CommandTFlush<cr>:CommandT<cr>
else
" else CtrlP
  let g:ctrlp_max_height = 20
  let cwd = getcwd()
  nnoremap <silent> <leader>f :CtrlP cwd<cr><f5><cr>
endif

" select text that was just pasted
nnoremap <leader>v V`]
" create a new vertical split window and switch over to it
nnoremap <silent> <leader>sv :botright vnew<cr>
" create a new horizontal split window
nnoremap <silent> <leader>sh :sp<cr>
" jump back and forth between files
nnoremap <leader><leader> <C-^>
" open .vimrc to edit in the current window
nnoremap <leader>ev :e ~/.vimrc<cr>
" open .vimrc to edit in a vertical split
nnoremap <leader>esv :vsp ~/.vimrc<cr>
" change working directory to file being edited, print after
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
" easy indent/outdent
nnoremap <Tab> >>
nnoremap <S-Tab> <<
vnoremap <Tab> >gv 
vnoremap <S-Tab> <gv
" yank to system clipboard
noremap <leader>y "+y
" paste from system clipboard
nnoremap <leader>p "*p
" toggle spell check
nnoremap <silent> <leader>ss :setlocal spell!<cr>

" open directory of file in Finder
if has('mac')
  nnoremap <leader>o :silent !open %:p:h<cr> 
endif

nmap Y y$
map Q gq

" make the split full width - useful when more space is temporarily needed
nnoremap <silent> <S-M> :vertical resize 999<cr>

function! RunCurrentFile()
  let ft = &ft
  exec ':w'

  if ft == 'ruby'
    exec ':!ruby %'
  endif
  if ft == 'php'
    exec ':!php -f %'
  endif
  if ft == 'sh'
    exec ':!bash %'
  endif
  if ft == 'python'
    exec ':!python %'
  endif
endfunction
nnoremap <leader>r :call RunCurrentFile()<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AUTOCOMMANDS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
    au!
    " For all text files set 'textwidth' to 78 characters.
    au FileType text setlocal textwidth=78

    au BufNewFile,BufRead *.ss,*.erb silent set ft=html
    au BufNewFile,BufRead /etc/nginx/*.conf silent set ft=nginx
    au BufNewFile,BufRead * setlocal formatoptions=cqnl

    au FileType python set sw=4 sts=4 et

    au WinEnter * set cursorline
    au WinLeave * set nocursorline

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    au BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif
  augroup END
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>t :call RunTestFile()<cr>
map <leader>T :call RunNearestTest()<cr>
map <leader>a :call RunTests('')<cr>

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number . " -b")
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    if match(a:filename, '\.feature$') != -1
        exec ":!script/features " . a:filename
    else
        if filereadable("script/test")
            exec ":!script/test " . a:filename
        elseif filereadable("Gemfile")
            exec ":!bundle exec rspec --color " . a:filename
        else
            exec ":!rspec --color " . a:filename
        end
    end
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SHOW SYNTAX HIGHLIGHTING GROUPS FOR WORD UNDER CURSOR
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>hi :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" USE LOCAL .vimrc.local
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if filereadable(expand("$HOME/.vimrc.local"))
  so $HOME/.vimrc.local
endif
