" .vimrc
" Brandon Iffert <brandoniffert@gmail.com>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SETUP
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
filetype off

" bootstrap vundle on a fresh install
if !isdirectory(expand("~/.vim/bundle/vundle"))
  !git clone git://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
  let s:bootstrap=1
endif

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" plugins
Bundle 'danro/rename.vim'
Bundle 'ervandew/supertab'
Bundle 'gmarik/vundle'
Bundle 'godlygeek/tabular'
Bundle 'kien/ctrlp.vim'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'mileszs/ack.vim'
Bundle 'tmhedberg/matchit'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'wincent/Command-T'
Bundle 'skalnik/vim-vroom'

" colors
Bundle 'altercation/vim-colors-solarized'
Bundle 'nanotech/jellybeans.vim'

" syntax/ft
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'evanmiller/nginx-vim-syntax'
Bundle 'johnhamelink/blade.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'tpope/vim-markdown'

if exists("s:bootstrap") && s:bootstrap
  unlet s:bootstrap
  BundleInstall
endif

filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" GENERAL
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8
set nomodeline
set hidden
set ruler
set backspace=eol,start,indent
set history=10000
set showbreak=↪
set autoread
set cursorline
set cmdheight=2
set scrolloff=3
set t_ti= t_te=
set showcmd
set notimeout
set ttimeout
set ttimeoutlen=10
set display+=lastline
set fileformats+=mac
set formatoptions=cqnl
set complete-=i
set noshowmode
set lazyredraw

" tabs & indenting
set expandtab tabstop=2 shiftwidth=2 softtabstop=2
set shiftround
set autoindent smarttab smartindent

" backups
set nobackup 
set nowritebackup
set noswapfile

" wildmenu
set wildmenu
set wildmode=longest,list
set wildignore+=.git,.svn,*.jpg,*.jpeg,*.png,*.gif,*.sw?,*.DS_Store,*.pyc

" searching
set showmatch incsearch hlsearch ignorecase smartcase

" folding
set foldmethod=marker
set foldlevelstart=0
nnoremap <space> za

" remap leader
let mapleader=","

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ENVIRONMENTS AND COLOR
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
set t_Co=256

" read PROFILE_BG enviornment variable and set colors accordingly
if $PROFILE_BG == 'light'
  set bg=light
else
  set bg=dark
endif

" read ITERM_PROFILE enviornment variable and set solarized
if $ITERM_PROFILE =~ 'solarized'
  colorscheme solarized
  let g:powerline_config_overrides = {'ext': {'vim': {'colorscheme': 'solarized'} } }
else
  colorscheme bti-dark
endif

if has('gui_macvim')
  set guifont=Source\ Code\ Pro\ Light\ for\ Powerline:h14
  set guioptions-=r
  set guioptions-=L
  set guioptions-=b
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" STATUSLINE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2
set statusline=                        " clear
set statusline=%{Mode()}               " show current mode name
set statusline+=[%n]                   " buffer number
set statusline+=\ %f                   " file path
set statusline+=\ %m%r%w%h             " modified/read-only/preview/help
set statusline+=%=                     " left/right separator
set statusline+=%{&fileformat}\ \|     " file format
set statusline+=\ %{&fileencoding}\ \| " file encoding
set statusline+=\ %{&filetype}\ \|     " file type
set statusline+=\ %p%%\ \|             " file percentage
set statusline+=\ LN\ %l:%c\           " line/column number

let g:last_mode = ''
function! Mode()
  let l:mode = mode()

  if l:mode ==# "n"
    return "  NORMAL "
  elseif l:mode ==# "i"
    return "  INSERT "
  elseif l:mode ==# "R"
    return "  REPLACE "
  elseif l:mode ==# "v"
    return "  VISUAL "
  elseif l:mode ==# "V"
    return "  V·LINE "
  elseif l:mode ==# "\<C-V>"
    return "  V·BLOCK "
  elseif l:mode ==# "c"
    return "  COMMAND "
  else
    return l:mode
  endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" POWERLINE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set rtp+=$POWERLINE/bindings/vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" KEY MAPS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap j gj
nnoremap k gk
nnoremap <silent> <CR> :nohlsearch<cr>

" make K split lines (opposite of J)
nmap K i<cr><esc>k$

" use hjkl for switching between splits
nnoremap <C-j> <C-W>j
nnoremap <C-h> <C-W>h
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l

let g:EasyMotion_leader_key = '<Leader>e'

let g:vroom_map_keys = 0
map <silent> <leader>t :VroomRunTestFile<cr>

" use Command-T if available...
if has('ruby')
  let g:CommandTCancelMap=['<esc>', '<C-c>']
  let g:CommandTMaxHeight=30
  nnoremap <silent> <leader>f :CommandTFlush<cr>\|:CommandT<cr>
else
" else CtrlP
  let g:ctrlp_max_height = 30
  let cwd = getcwd()
  nnoremap <silent> <leader>f :CtrlP cwd<cr>
endif

" select text that was just pasted
nnoremap <leader>v V`]
" create a new vertical split window and switch over to it
nnoremap <silent> <leader>sv :botright vnew<cr>
" create a new horizontal split window
nnoremap <silent> <leader>sh :sp<cr>
" jump back and forth between files
nnoremap <leader><leader> <C-^>
" change working directory to file being edited, print after
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
" easy indent/outdent
nnoremap <Tab> >>
nnoremap <S-Tab> <<
vnoremap <Tab> >gv 
vnoremap <S-Tab> <gv
" yank to system clipboard
noremap <leader>y "+y
" paste from system clipboard
nnoremap <leader>p "*p
" toggle spell check
nnoremap <silent> <leader>ss :setlocal spell!<cr>
" make Y act like other capital letters
nmap Y y$

" open directory of file in Finder
if has('mac')
  nnoremap <leader>o :silent !open %:p:h<cr> 
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AUTOCOMMANDS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
    au!
    au FileType text,markdown set spell
    au FileType python set sw=4 sts=4 et

    au BufNewFile,BufRead *.ss,*.erb silent set ft=html
    au BufNewFile,BufRead *.blade.php silent set ft=blade.html
    au BufRead,BufNewFile *.scss set filetype=scss

    au WinEnter * set cursorline
    au WinLeave * set nocursorline

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    au BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif
  augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUN CURRENT FILE ON COMMAND LINE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RunCurrentFile()
  let ft = &ft
  exec ':w'

  if ft == 'ruby'
    exec ':!ruby %'
  elseif ft == 'php'
    exec ':!php -f %'
  elseif ft == 'sh'
    exec ':!bash %'
  elseif ft == 'python'
    exec ':!python %'
  endif
endfunction

nnoremap <leader>r :call RunCurrentFile()<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" USE LOCAL .vimrc.local
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if filereadable(expand("$HOME/.vimrc.local"))
  so $HOME/.vimrc.local
endif
